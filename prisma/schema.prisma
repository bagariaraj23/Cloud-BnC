// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId

  accounts     Account[]
  listings     Listing[]
  reservations Reservation[]
  // reviews Review[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  // bodyImageSrc   String
  imagesSrc      String[]
  docImagesSrc   String[]
  insImagesSrc   String[]
  polImagesSrc   String[]
  createdAt      DateTime @default(now())
  category       String
  vehicleType    String?
  passengerCount Int
  userId         String   @db.ObjectId
  // price          Int
  pricePerHour   Int?
  pricePerDay    Int?
  pricePerWeek   Int?
  make           String?
  model          String?
  year           Int?
  color          String?
  location       String

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]

  // // listing model for bike rentals
  // bikeType String?
  // bikeMake String?
  // bikeModel String?
  // bikeYear Int?
  // bikeSize String?
  // bikeColor String?
  // bikePricePerDay Int?
  // bikePricePerWeek Int?
  // bikePricePerMonth Int?

  // // listing model for car rentals
  // carMake String?
  // carModel String?
  // carYear Int?
  // carColor String?
  // carPricePerDay Int?
  // carPricePerWeek Int?
  // carPricePerMonth Int?

  // // listing model for trucks rentals
  // truckMake String?
  // truckModel String?
  // truckYear Int?
  // truckType String?
  // truckSize String?
  // truckColor String?
  // truckPricePerDay Int?
  // truckPricePerWeek Int?
  // truckPricePerMonth Int?

  // // listing model for bycycle rentals
  // bikeType String?
  // bikeSize String?
  // bikeColor String?
  // bikePricePerDay Int?
  // bikePricePerWeek Int?
  // bikePricePerMonth Int?
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalHours Int?
  totalDays  Int?
  totalWeeks Int?
  totalPrice Int
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
